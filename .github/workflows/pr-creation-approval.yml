# PR Creation and Approval Notifications
name: PR Creation and Approval Notifications

on:
  pull_request:
    types: [opened]
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  pull-requests: write
  issues: write
  repository-projects: read
  statuses: read
  checks: read

jobs:
  handlePullRequest:
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Load reviewers from reviewers.json
        id: load_reviewers
        run: |
          ALL_REVIEWERS=$(cat .github/workflows/reviewers.json | jq -c '.')
          echo "ALL_REVIEWERS=$ALL_REVIEWERS" >> $GITHUB_ENV

      - name: Get branch prefix and labels
        id: branch_prefix_labels
        run: |
          PREFIX=$(echo ${{ github.event.pull_request.head.ref }} | awk -F'/' '{print toupper($1)}')
          BASE_BRANCH=${{ github.event.pull_request.base.ref }}
          LABELS=("$PREFIX")

          if [[ "$BASE_BRANCH" == "develop" ]]; then
            LABELS+=("Develop")
          elif [[ "$BASE_BRANCH" == "staging" ]]; then
            LABELS+=("Staging")
          elif [[ "$BASE_BRANCH" == "main" ]]; then
            LABELS+=("Main")
          else
            LABELS+=("Unknown")
          fi

          LABEL_STRING=$(IFS=, ; echo "${LABELS[*]}")
          echo "prefix=$PREFIX" >> $GITHUB_OUTPUT
          echo "labels=$LABEL_STRING" >> $GITHUB_OUTPUT


          - name: Update PR title and body
          run: |
            if [ -z "${{ steps.get_branch_prefix.outputs.pr_title }}" ]; then
              echo "PR title is empty, setting to default"
              pr_title="Default PR Title"
            else
              pr_title="${{ steps.get_branch_prefix.outputs.pr_title }}"
            fi
            gh pr edit ${{ github.event.pull_request.number }} \
              --title "${{ steps.get_branch_prefix.outputs.pr_title }}" \
              --body "$(echo "${{ github.event.pull_request.body }}" | sed 's/\r//')"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add assignees to PR
        run: |
          gh pr edit ${{ github.event.pull_request.number }} \
            --add-assignee ${{ github.event.pull_request.user.login }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Select reviewers and send Slack notification
        run: |
          ACTOR="${{ github.actor }}"
          RESULT=$(jq -c --arg ACTOR "$ACTOR" '
            reduce .[] as $item (
              {"assignee_slack_id": null, "selected_reviewers": []};
              if $item.github_username == $ACTOR then
                .assignee_slack_id = $item.slack_id
              else
                .selected_reviewers += [$item]
              end
            )
          ' .github/workflows/reviewers.json)

          ASSIGNEE_SLACK_ID=$(echo "$RESULT" | jq -r '.assignee_slack_id')
          SLACK_REVIEWERS=$(echo "$RESULT" | jq -c '.selected_reviewers | map("<@"+.slack_id+">") | join(", ")')
          PR_LINK="https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}"

          SLACK_MESSAGE=$(cat .github/workflows/slack_message_template.json | \
            jq --arg assignee "<@$ASSIGNEE_SLACK_ID>" \
              --arg slack_reviewers "$SLACK_REVIEWERS" \
              --arg pr_link "$PR_LINK" \
              --arg pr_title "${{ github.event.pull_request.title }}" \
              --arg branch "${{ github.event.pull_request.head.ref }}" '
              .blocks[1].fields[0].text |= sub("{{ASSIGNEE}}"; $assignee) | 
              .blocks[1].fields[1].text |= sub("{{SLACK_REVIEWERS}}"; $slack_reviewers) | 
              .blocks[2].fields[0].text |= sub("{{PR_TITLE}}"; $pr_title) | 
              .blocks[2].fields[1].text |= sub("{{BRANCH}}"; $branch) |
              .blocks[3].elements[0].url |= sub("{{PR_LINK}}"; $pr_link)')

          curl -X POST -H 'Content-type: application/json' --data "$SLACK_MESSAGE" ${{ secrets.SLACK_WEBHOOK_URL }}

  notifyApproval:
    if: ${{ github.event_name == 'pull_request_review' && github.event.review.state == 'approved' }}
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Load reviewers from reviewers.json
        id: load_reviewers
        run: |
          ALL_REVIEWERS=$(cat .github/workflows/reviewers.json | jq -c '.')
          echo "ALL_REVIEWERS=$ALL_REVIEWERS" >> $GITHUB_ENV

      - name: Get PR author and reviewer Slack IDs
        run: |
          ASSIGNEE=$(gh api "repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" --jq '.user.login')
          ASSIGNEE_SLACK_ID=$(echo '${{ env.ALL_REVIEWERS }}' | jq -r --arg ASSIGNEE "$ASSIGNEE" '.[] | select(.github_username == $ASSIGNEE).slack_id')

          REVIEWER="${{ github.event.review.user.login }}"
          REVIEWER_SLACK_ID=$(echo '${{ env.ALL_REVIEWERS }}' | jq -r --arg REVIEWER "$REVIEWER" '.[] | select(.github_username == $REVIEWER).slack_id')

          SLACK_MESSAGE=$(cat .github/workflows/slack_message_template.json | \
            jq --arg assignee "<@$ASSIGNEE_SLACK_ID>" \
              --arg reviewer "<@$REVIEWER_SLACK_ID>" \
              --arg pr_link "${{ github.event.pull_request.html_url }}" \
              --arg pr_title "${{ github.event.pull_request.title }}" \
              --arg branch "${{ github.event.pull_request.head.ref }}" '
              .blocks[1].fields[0].text |= sub("{{ASSIGNEE}}"; $assignee) | 
              .blocks[1].fields[1].text |= sub("{{REVIEWER}}"; $reviewer) | 
              .blocks[2].fields[0].text |= sub("{{PR_TITLE}}"; $pr_title) | 
              .blocks[2].fields[1].text |= sub("{{BRANCH}}"; $branch) |
              .blocks[3].elements[0].url |= sub("{{PR_LINK}}"; $pr_link)')

          curl -X POST -H 'Content-type: application/json' --data "$SLACK_MESSAGE" ${{ secrets.SLACK_WEBHOOK_URL }}
