name: PR Review Comment Notifications

on:
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  pull-requests: write
  issues: write
  repository-projects: read
  statuses: read
  checks: read

env:
  ALL_REVIEWERS: ${{ secrets.ALL_REVIEWERS }}

jobs:
  notifyReviewComment:
    if: github.event.review.state == 'commented'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Check if self-comment
        id: check_self_comment
        run: |
          # PR 작성자와 코멘트 작성자가 같은지 확인
          if [[ "${{ github.event.pull_request.user.login }}" == "${{ github.event.review.user.login }}" ]]; then
            echo "is_self_comment=true" >> $GITHUB_OUTPUT
            echo "Skip notification for self-comment"
          else
            echo "is_self_comment=false" >> $GITHUB_OUTPUT
          fi

      - name: Get PR author and reviewer information
        if: steps.check_self_comment.outputs.is_self_comment != 'true'
        run: |
          ASSIGNEE=$(gh api "repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" --jq '.user.login')
          ASSIGNEE_SLACK_ID=$(echo '${{ env.ALL_REVIEWERS }}' | jq -r --arg ASSIGNEE "$ASSIGNEE" '.[] | select(.github_username == $ASSIGNEE).slack_id')
          echo "ASSIGNEE_SLACK_ID=$ASSIGNEE_SLACK_ID" >> $GITHUB_ENV

          REVIEWER="${{ github.event.review.user.login }}"
          REVIEWER_SLACK_ID=$(echo '${{ env.ALL_REVIEWERS }}' | jq -r --arg REVIEWER "$REVIEWER" '.[] | select(.github_username == $REVIEWER).slack_id')
          echo "REVIEWER_SLACK_ID=$REVIEWER_SLACK_ID" >> $GITHUB_ENV

      - name: Get PR details
        if: steps.check_self_comment.outputs.is_self_comment != 'true'
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          BRANCH="${{ github.event.pull_request.head.ref }}"
          PR_LINK="${{ github.event.pull_request.html_url }}"

          # Get review comment body and truncate it
          COMMENT_BODY="${{ github.event.review.body }}"
          # Take first 150 characters and add ellipsis if needed
          TRUNCATED_COMMENT=$(echo "$COMMENT_BODY" | cut -c 1-150)
          if [ ${#COMMENT_BODY} -gt 150 ]; then
            TRUNCATED_COMMENT="$TRUNCATED_COMMENT..."
          fi

          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "PR_LINK=$PR_LINK" >> $GITHUB_ENV
          echo "COMMENT_PREVIEW=$TRUNCATED_COMMENT" >> $GITHUB_ENV

      - name: Send Slack notification
        if: steps.check_self_comment.outputs.is_self_comment != 'true'
        run: |
          HEADER_TEXT="New PR Comment!"
          HEADER_EMOJI=":speech_balloon:"
          SLACK_API_URL="https://slack.com/api/chat.postMessage"

          # DM 채널 ID 가져오기 (캐싱 방식 적용)
          CACHE_FILE=".dm_channel_cache.json"
          if [[ ! -f "$CACHE_FILE" ]]; then
            echo '{}' > "$CACHE_FILE"
          fi

          ASSIGNEE_DM_CHANNEL=$(jq -r --arg ASSIGNEE "$ASSIGNEE_SLACK_ID" '.[$ASSIGNEE] // empty' "$CACHE_FILE")

          if [[ -z "$ASSIGNEE_DM_CHANNEL" ]]; then
            echo "Creating new DM channel..."
            RESPONSE=$(curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.SLACK_OAUTH_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data "{\"users\": \"${ASSIGNEE_SLACK_ID}\"}" \
              "https://slack.com/api/conversations.open")
              
            ASSIGNEE_DM_CHANNEL=$(echo $RESPONSE | jq -r '.channel.id')
            echo "ASSIGNEE_DM_CHANNEL=${ASSIGNEE_DM_CHANNEL}" >> $GITHUB_ENV

            # Cache the DM channel ID for future use
            jq --arg ASSIGNEE "$ASSIGNEE_SLACK_ID" --arg CHANNEL "$ASSIGNEE_DM_CHANNEL" '.[$ASSIGNEE] = $CHANNEL' "$CACHE_FILE" > temp.json && mv temp.json "$CACHE_FILE"
          fi

          FULL_HEADER="$HEADER_EMOJI $HEADER_TEXT"
          BUTTON_TEXT="지금 당장 확인하기"
          ASSIGNEE="<@${ASSIGNEE_SLACK_ID}>"
          SLACK_REVIEWERS="<@${REVIEWER_SLACK_ID}>"

          SLACK_MESSAGE=$(cat .github/workflows/slack_message_template.json | \
            jq --arg full_header "$FULL_HEADER" \
              --arg button_text "$BUTTON_TEXT" \
              --arg assignee "$ASSIGNEE" \
              --arg slack_reviewers "$SLACK_REVIEWERS" \
              --arg branch "$BRANCH" \
              --arg pr_link "$PR_LINK" \
              --arg pr_title "$PR_TITLE" \
              --arg comment_preview "$COMMENT_PREVIEW" \
              --arg channel "$ASSIGNEE_DM_CHANNEL" \
              '.channel = $channel |
                .blocks[0].text.text |= sub("{{HEADER}}"; $full_header) | 
                .blocks[1].fields[0].text |= sub("{{ASSIGNEE}}"; $assignee) | 
                .blocks[1].fields[1].text |= sub("{{SLACK_REVIEWERS}}"; $slack_reviewers) | 
                .blocks[2].fields[0].text |= sub("{{PR_TITLE}}"; $pr_title) | 
                .blocks[2].fields[1].text |= sub("{{BRANCH}}"; $branch) |
                .blocks += [{
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*코멘트:*\n```\($comment_preview)```"
                  }
                }] |
                .blocks[-1].elements[0].text.text |= sub("{{BUTTON_TEXT}}"; $button_text) |
                .blocks[-1].elements[0].url |= sub("{{PR_LINK}}"; $pr_link)')

          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.SLACK_OAUTH_TOKEN }}" \
            -H "Content-type: application/json" \
            --data "$SLACK_MESSAGE" \
            $SLACK_API_URL
