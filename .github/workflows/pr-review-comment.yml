name: PR Comment Notifications

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write
  repository-projects: read
  statuses: read
  checks: read

env:
  ALL_REVIEWERS: |
    [
      {"github_username": "portlogics-jina", "slack_id": "U07TTV10212"},
      {"github_username": "pja9362", "slack_id": "U07TGB567BR"}
    ]

jobs:
  notifyReviewComment:
    runs-on: ubuntu-22.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get commenter and PR author information
        run: |
          COMMENTER="${{ github.actor }}"
          PR_AUTHOR=$(gh api "repos/${{ github.repository }}/issues/${{ github.event.issue.number }}" --jq '.user.login')
          COMMENTER_SLACK_ID=$(echo '${{ env.ALL_REVIEWERS }}' | jq -r --arg COMMENTER "$COMMENTER" '.[] | select(.github_username == $COMMENTER).slack_id')
          PR_AUTHOR_SLACK_ID=$(echo '${{ env.ALL_REVIEWERS }}' | jq -r --arg PR_AUTHOR "$PR_AUTHOR" '.[] | select(.github_username == $PR_AUTHOR).slack_id')
          echo "COMMENTER_SLACK_ID=$COMMENTER_SLACK_ID" >> $GITHUB_ENV
          echo "PR_AUTHOR_SLACK_ID=$PR_AUTHOR_SLACK_ID" >> $GITHUB_ENV

      - name: Get PR details if it is a pull request
        run: |
          if [[ "${{ github.event.issue.pull_request }}" ]]; then
            PR_TITLE=$(gh pr view ${{ github.event.issue.number }} --json title -q '.title')
            BRANCH=$(gh pr view ${{ github.event.issue.number }} --json headRefName -q '.headRefName')
            PR_LINK="https://github.com/${{ github.repository }}/pull/${{ github.event.issue.number }}"
          else
            echo "Not a pull request comment. Skipping PR-specific details."
          fi
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "PR_LINK=$PR_LINK" >> $GITHUB_ENV

      - name: Prepare Slack message using template
        run: |
          HEADER_TEXT="New PR Comment"
          HEADER_EMOJI=":speech_balloon:"
          BUTTON_TEXT="지금 당장 확인하기"
          ASSIGNEE="<@${PR_AUTHOR_SLACK_ID}>" 
          SLACK_REVIEWERS="<@${COMMENTER_SLACK_ID}>"
          FULL_HEADER="$HEADER_EMOJI $HEADER_TEXT"
          
          SLACK_MESSAGE=$(cat .github/workflows/slack_message_template.json | \
            jq --arg full_header "$FULL_HEADER" \
              --arg button_text "$BUTTON_TEXT" \
              --arg assignee "$ASSIGNEE" \
              --arg slack_reviewers "$SLACK_REVIEWERS" \
              --arg branch "$BRANCH" \
              --arg pr_link "$PR_LINK" \
              --arg pr_title "$PR_TITLE" \
              '.blocks[0].text.text |= sub("{{HEADER}}"; $full_header) |
                .blocks[1].fields[0].text |= sub("{{ASSIGNEE}}"; $assignee) |
                .blocks[1].fields[1].text |= sub("{{SLACK_REVIEWERS}}"; $slack_reviewers) |
                .blocks[2].fields[0].text |= sub("{{PR_TITLE}}"; $pr_title) |
                .blocks[2].fields[1].text |= sub("{{BRANCH}}"; $branch) |
                .blocks[3].elements[0].text.text |= sub("{{BUTTON_TEXT}}"; $button_text) |
                .blocks[3].elements[0].url |= sub("{{PR_LINK}}"; $pr_link)')

          curl -X POST -H 'Content-type: application/json' --data "$SLACK_MESSAGE" ${{ secrets.SLACK_WEBHOOK_URL }} 
