name: PR Approval Notifications

on:
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  pull-requests: write
  issues: write
  repository-projects: read
  statuses: read
  checks: read

jobs:
  notifyApproval:
    if: github.event.review.state == 'approved'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Retrieve thread_ts
        id: retrieve_thread_ts
        run: |
          THREAD_TS=$(gh run view --json "outputs" --run-id "${{ github.run_id }}" | jq -r '.outputs.thread_ts')
          if [[ -z "$THREAD_TS" ]]; then
            echo "No thread_ts found. Skipping."
            exit 1
          fi
          echo "THREAD_TS=$THREAD_TS" >> $GITHUB_ENV

      - name: Load reviewers from reviewers.json
        id: load_reviewers
        run: |
          ALL_REVIEWERS=$(cat .github/workflows/reviewers.json | jq -c '.')
          echo "ALL_REVIEWERS=$ALL_REVIEWERS" >> $GITHUB_ENV

      - name: Get PR author and reviewer information
        run: |
          ASSIGNEE=$(gh api "repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" --jq '.user.login')
          ASSIGNEE_SLACK_ID=$(echo '${{ env.ALL_REVIEWERS }}' | jq -r --arg ASSIGNEE "$ASSIGNEE" '.[] | select(.github_username == $ASSIGNEE).slack_id')
          echo "ASSIGNEE_SLACK_ID=$ASSIGNEE_SLACK_ID" >> $GITHUB_ENV

          REVIEWER="${{ github.event.review.user.login }}"
          REVIEWER_SLACK_ID=$(echo '${{ env.ALL_REVIEWERS }}' | jq -r --arg REVIEWER "$REVIEWER" '.[] | select(.github_username == $REVIEWER).slack_id')
          echo "REVIEWER_SLACK_ID=$REVIEWER_SLACK_ID" >> $GITHUB_ENV

      - name: Get PR details
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          BRANCH="${{ github.event.pull_request.head.ref }}"
          PR_LINK="${{ github.event.pull_request.html_url }}"

          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "PR_LINK=$PR_LINK" >> $GITHUB_ENV

      - name: Send Slack notification
        run: |
          HEADER_TEXT="PR Approved!"
          HEADER_EMOJI=":white_check_mark:"
          FULL_HEADER="$HEADER_EMOJI $HEADER_TEXT"
          BUTTON_TEXT="지금 당장 확인하기"
          ASSIGNEE="<@${ASSIGNEE_SLACK_ID}>"
          SLACK_REVIEWERS="<@${REVIEWER_SLACK_ID}>"

          SLACK_MESSAGE=$(cat .github/workflows/slack_message_template.json | \
            jq --arg full_header "$FULL_HEADER" \
              --arg button_text "$BUTTON_TEXT" \
              --arg assignee "$ASSIGNEE" \
              --arg slack_reviewers "$SLACK_REVIEWERS" \
              --arg branch "$BRANCH" \
              --arg pr_link "$PR_LINK" \
              --arg pr_title "$PR_TITLE" \
              '.blocks[0].text.text |= sub("{{HEADER}}"; $full_header) | 
                .blocks[1].fields[0].text |= sub("{{ASSIGNEE}}"; $assignee) | 
                .blocks[1].fields[1].text |= sub("{{SLACK_REVIEWERS}}"; $slack_reviewers) | 
                .blocks[2].fields[0].text |= sub("{{PR_TITLE}}"; $pr_title) | 
                .blocks[2].fields[1].text |= sub("{{BRANCH}}"; $branch) | 
                .blocks[3].elements[0].text.text |= sub("{{BUTTON_TEXT}}"; $button_text) |
                .blocks[3].elements[0].url |= sub("{{PR_LINK}}"; $pr_link)')

          # curl -X POST \
          #   -H "Authorization: Bearer ${{ secrets.SLACK_OAUTH_TOKEN }}" \
          #   -H 'Content-type: application/json' \
          #   --data "$SLACK_MESSAGE" \
          #   "${{ secrets.SLACK_WEBHOOK_URL }}"
          
          curl -X POST -H "Content-type: application/json" -H "Authorization: Bearer ${{ secrets.SLACK_OAUTH_TOKEN }}" \
            --data "$SLACK_MESSAGE" https://slack.com/api/chat.postMessage